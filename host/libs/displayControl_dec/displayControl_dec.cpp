// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <string.h>
#include "displayControl_opcodes.h"

#include "displayControl_dec.h"


#include "ProtocolUtils.h"

#include <stdio.h>

typedef unsigned int tsize_t; // Target "size_t", which is 32-bit for now. It may or may not be the same as host's size_t when emugen is compiled.

using namespace emugl;

size_t displayControl_decoder_context_t::decode(void *buf, size_t len, kmre::DisplayControl::IOStream *stream)
{
                           
	size_t pos = 0;
	if (len < 8) return pos; 
	unsigned char *ptr = (unsigned char *)buf;
	bool unknownOpcode = false;  
	while ((len - pos >= 8) && !unknownOpcode) {   
		uint32_t opcode = *(uint32_t *)ptr;   
		size_t packetLen = *(uint32_t *)(ptr + 4);
		if (len - pos < packetLen)  return pos; 
		switch(opcode) {
		case OP_FBPost: {
			uint32_t var_name = Unpack<uint32_t,uint32_t>(ptr + 8);
			int32_t var_width = Unpack<int32_t,uint32_t>(ptr + 8 + 4);
			int32_t var_height = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4);
			int32_t var_stride = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4);
			int32_t var_bpp = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = 			this->FBPost(var_name, var_width, var_height, var_stride, var_bpp);
			stream->flush();
			break;
		}
		case OP_postLayer: {
			uint32_t size_name __attribute__((unused)) = Unpack<uint32_t,uint32_t>(ptr + 8);
			InputBuffer inptr_name(ptr + 8 + 4, size_name);
			uint32_t var_bo_name = Unpack<uint32_t,uint32_t>(ptr + 8 + 4 + size_name);
			int32_t var_width = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4);
			int32_t var_height = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4);
			int32_t var_stride = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4);
			int32_t var_bpp = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4);
			int32_t var_sourceCropLeft = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4);
			int32_t var_sourceCropTop = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_sourceCropRight = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_sourceCropBottom = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_displayFrameLeft = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_displayFrameTop = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_displayFrameRight = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			int32_t var_displayFrameBottom = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			this->postLayer((const char*)(inptr_name.get()), var_bo_name, var_width, var_height, var_stride, var_bpp, var_sourceCropLeft, var_sourceCropTop, var_sourceCropRight, var_sourceCropBottom, var_displayFrameLeft, var_displayFrameTop, var_displayFrameRight, var_displayFrameBottom);
			break;
		}
		case OP_postAllLayersDone: {
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = 			this->postAllLayersDone();
			stream->flush();
			break;
		}
		case OP_getDisplayWidth: {
			size_t totalTmpSize = sizeof(uint32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(uint32_t *)(&tmpBuf[0]) = 			this->getDisplayWidth();
			stream->flush();
			break;
		}
		case OP_getDisplayHeight: {
			size_t totalTmpSize = sizeof(uint32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(uint32_t *)(&tmpBuf[0]) = 			this->getDisplayHeight();
			stream->flush();
			break;
		}
		case OP_getDisplayFPS: {
			size_t totalTmpSize = sizeof(uint32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(uint32_t *)(&tmpBuf[0]) = 			this->getDisplayFPS();
			stream->flush();
			break;
		}
		case OP_getDisplayXDpi: {
			size_t totalTmpSize = sizeof(uint32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(uint32_t *)(&tmpBuf[0]) = 			this->getDisplayXDpi();
			stream->flush();
			break;
		}
		case OP_getDisplayYDpi: {
			size_t totalTmpSize = sizeof(uint32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(uint32_t *)(&tmpBuf[0]) = 			this->getDisplayYDpi();
			stream->flush();
			break;
		}
		case OP_postVirtualDisplay: {
			uint32_t size_name __attribute__((unused)) = Unpack<uint32_t,uint32_t>(ptr + 8);
			InputBuffer inptr_name(ptr + 8 + 4, size_name);
			uint32_t var_id = Unpack<uint32_t,uint32_t>(ptr + 8 + 4 + size_name);
			uint32_t var_bo_name = Unpack<uint32_t,uint32_t>(ptr + 8 + 4 + size_name + 4);
			int32_t var_width = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4);
			int32_t var_height = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4);
			int32_t var_stride = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4);
			int32_t var_bpp = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4);
			int32_t var_orientation = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + size_name + 4 + 4 + 4 + 4 + 4 + 4);
			this->postVirtualDisplay((const char*)(inptr_name.get()), var_id, var_bo_name, var_width, var_height, var_stride, var_bpp, var_orientation);
			break;
		}
		case OP_postAllVirtualDisplaysDone: {
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = 			this->postAllVirtualDisplaysDone();
			stream->flush();
			break;
		}
		case OP_postBoForScreenRecord: {
			uint32_t var_at_name = Unpack<uint32_t,uint32_t>(ptr + 8);
			uint32_t var_name = Unpack<uint32_t,uint32_t>(ptr + 8 + 4);
			int32_t var_width = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4);
			int32_t var_height = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4);
			int32_t var_stride = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4 + 4);
			int32_t var_ver = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = this->postBoForScreenRecord(var_at_name, var_name, var_width, var_height, var_stride, var_ver);
			stream->flush();
			break;
		}
		case OP_postCaptureScreenColorBuffer: {
			uint32_t name = Unpack<uint32_t,uint32_t>(ptr + 8);
			this->postCaptureScreenColorBuffer(name);
			break;
		}
		case OP_authenticateMagic: {
			uint32_t var_magic = Unpack<uint32_t,uint32_t>(ptr + 8);
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = this->authenticateMagic(var_magic);
			stream->flush();
			break;
		}
		case OP_updateSharingScreenDisplay: {
			uint32_t var_name = Unpack<uint32_t,uint32_t>(ptr + 8);
			int32_t var_width = Unpack<int32_t,uint32_t>(ptr + 8 + 4);
			int32_t var_height = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4);
			int32_t var_stride = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4);
			int32_t var_bpp = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4 + 4);
			int32_t var_swap = Unpack<int32_t,uint32_t>(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = sizeof(int32_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			*(int32_t *)(&tmpBuf[0]) = this->updateSharingScreenDisplay(var_name, var_width, var_height, var_stride, var_bpp, var_swap);
			stream->flush();
			break;
		}
			default:
				unknownOpcode = true;
		} //switch
		if (!unknownOpcode) {
			pos += packetLen;
			ptr += packetLen;
		}
	} // while
	return pos;
}
