// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <memory>
#include <string.h>
#include "displayControl_opcodes.h"

#include "displayControl_enc.h"


#include <stdio.h>

namespace {
#if 0
void enc_unsupported()
{
    ALOGE("Function is unsupported\n");
}
#endif

int32_t FBPost_enc(void *self , uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t bpp)
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8 + 4 + 4 + 4 + 4 + 4;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_FBPost;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;

        memcpy(ptr, &name, 4); ptr += 4;
        memcpy(ptr, &width, 4); ptr += 4;
        memcpy(ptr, &height, 4); ptr += 4;
        memcpy(ptr, &stride, 4); ptr += 4;
        memcpy(ptr, &bpp, 4); ptr += 4;

    int32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

void postLayer_enc(void *self , const char* name, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t sourceCropLeft, int32_t sourceCropTop, int32_t sourceCropRight, int32_t sourceCropBottom, int32_t displayFrameLeft, int32_t displayFrameTop, int32_t displayFrameRight, int32_t displayFrameBottom)
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

    const unsigned int __size_name =  (strlen(name) + 1);
     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8 + __size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 1*4;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_postLayer;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;

    *(unsigned int *)(ptr) = __size_name; ptr += 4;
    memcpy(ptr, name, __size_name);ptr += __size_name;
        memcpy(ptr, &bo_name, 4); ptr += 4;
        memcpy(ptr, &width, 4); ptr += 4;
        memcpy(ptr, &height, 4); ptr += 4;
        memcpy(ptr, &stride, 4); ptr += 4;
        memcpy(ptr, &bpp, 4); ptr += 4;
        memcpy(ptr, &sourceCropLeft, 4); ptr += 4;
        memcpy(ptr, &sourceCropTop, 4); ptr += 4;
        memcpy(ptr, &sourceCropRight, 4); ptr += 4;
        memcpy(ptr, &sourceCropBottom, 4); ptr += 4;
        memcpy(ptr, &displayFrameLeft, 4); ptr += 4;
        memcpy(ptr, &displayFrameTop, 4); ptr += 4;
        memcpy(ptr, &displayFrameRight, 4); ptr += 4;
        memcpy(ptr, &displayFrameBottom, 4); ptr += 4;
}

int32_t postAllLayersDone_enc(void *self )
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_postAllLayersDone;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    int32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

uint32_t getDisplayWidth_enc(void *self )
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_getDisplayWidth;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    uint32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

uint32_t getDisplayHeight_enc(void *self )
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_getDisplayHeight;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    uint32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

uint32_t getDisplayFPS_enc(void *self )
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_getDisplayFPS;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    uint32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

uint32_t getDisplayXDpi_enc(void *self )
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_getDisplayXDpi;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    uint32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

uint32_t getDisplayYDpi_enc(void *self )
{
    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_getDisplayYDpi;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;


    uint32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

void postVirtualDisplay_enc(void *self , const char* name, uint32_t id, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t orientation)
{
    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

    const unsigned int __size_name =  (strlen(name) + 1);
     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8 + __size_name + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 1*4;
     const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_postVirtualDisplay;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;

    *(unsigned int *)(ptr) = __size_name; ptr += 4;
    memcpy(ptr, name, __size_name);ptr += __size_name;
        memcpy(ptr, &id, 4); ptr += 4;
        memcpy(ptr, &bo_name, 4); ptr += 4;
        memcpy(ptr, &width, 4); ptr += 4;
        memcpy(ptr, &height, 4); ptr += 4;
        memcpy(ptr, &stride, 4); ptr += 4;
        memcpy(ptr, &bpp, 4); ptr += 4;
        memcpy(ptr, &orientation, 4); ptr += 4;
}

int32_t postAllVirtualDisplaysDone_enc(void *self )
{
    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

     unsigned char *ptr;
     unsigned char *buf;
     const size_t sizeWithoutChecksum = 8;
     const size_t totalSize = sizeWithoutChecksum;

    buf = stream->alloc(totalSize);

    ptr = buf;
    int tmp = OP_postAllVirtualDisplaysDone;memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;

    int32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

int32_t postBoForScreenRecord_enc(void *self , uint32_t at_name, uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t ver)
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

    unsigned char *ptr;
    unsigned char *buf;
    const size_t sizeWithoutChecksum = 8 + 4 + 4 + 4 + 4 + 4 + 4;
    const size_t totalSize = sizeWithoutChecksum;

    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_postBoForScreenRecord;
    memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;
    memcpy(ptr, &at_name, 4); ptr += 4;
    memcpy(ptr, &name, 4); ptr += 4;
    memcpy(ptr, &width, 4); ptr += 4;
    memcpy(ptr, &height, 4); ptr += 4;
    memcpy(ptr, &stride, 4); ptr += 4;
    memcpy(ptr, &ver, 4); ptr += 4;

    int32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

void postCaptureScreenColorBuffer_enc(void *self , uint32_t name)
{
    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

    unsigned char *ptr;
    unsigned char *buf;
    const size_t sizeWithoutChecksum = 8 + 4;
    const size_t totalSize = sizeWithoutChecksum;

    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_postCaptureScreenColorBuffer;
    memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;
    memcpy(ptr, &name, 4); ptr += 4;
}

int32_t authenticateMagic_enc(void *self , uint32_t magic)
{

    displayControl_encoder_context_t *ctx = (displayControl_encoder_context_t *)self;
    kmre::DisplayControl::IOStream *stream = ctx->m_stream;

    unsigned char *ptr;
    unsigned char *buf;
    const size_t sizeWithoutChecksum = 8 + 4;
    const size_t totalSize = sizeWithoutChecksum;
    buf = stream->alloc(totalSize);
    ptr = buf;
    int tmp = OP_authenticateMagic;
    memcpy(ptr, &tmp, 4); ptr += 4;
    memcpy(ptr, &totalSize, 4);  ptr += 4;
    memcpy(ptr, &magic, 4); ptr += 4;

    int32_t retval;
    stream->readback(&retval, 4);
    return retval;
}

}  // namespace

displayControl_encoder_context_t::displayControl_encoder_context_t(kmre::DisplayControl::IOStream *stream)
{
    m_stream = stream;
    this->FBPost = &FBPost_enc;
    this->postLayer = &postLayer_enc;
    this->postAllLayersDone = &postAllLayersDone_enc;
    this->getDisplayWidth = &getDisplayWidth_enc;
    this->getDisplayHeight = &getDisplayHeight_enc;
    this->getDisplayFPS = &getDisplayFPS_enc;
    this->getDisplayXDpi = &getDisplayXDpi_enc;
    this->getDisplayYDpi = &getDisplayYDpi_enc;
    this->postVirtualDisplay = &postVirtualDisplay_enc;
    this->postAllVirtualDisplaysDone = &postAllVirtualDisplaysDone_enc;
    this->postBoForScreenRecord = &postBoForScreenRecord_enc;
    this->postCaptureScreenColorBuffer = &postCaptureScreenColorBuffer_enc;
    this->authenticateMagic = &authenticateMagic_enc;
}

