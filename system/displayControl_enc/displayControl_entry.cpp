// Generated Code - DO NOT EDIT !!
// generated by 'emugen'
#include <stdio.h>
#include <stdlib.h>
#include "displayControl_client_context.h"

#ifndef GL_TRUE
extern "C" {
    int32_t FBPost(uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t bpp);
    void postLayer(const char* name, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t sourceCropLeft, int32_t sourceCropTop, int32_t sourceCropRight, int32_t sourceCropBottom, int32_t displayFrameLeft, int32_t displayFrameTop, int32_t displayFrameRight, int32_t displayFrameBottom);
    int32_t postAllLayersDone();
    uint32_t getDisplayWidth();
    uint32_t getDisplayHeight();
    uint32_t getDisplayFPS();
    uint32_t getDisplayXDpi();
    uint32_t getDisplayYDpi();
    void postVirtualDisplay(const char* name, uint32_t id, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t orientation);
    int32_t postAllVirtualDisplaysDone();
    int32_t postBoForScreenRecord(uint32_t at_name, uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t ver);
    void postCaptureScreenColorBuffer(uint32_t name);
    int32_t authenticateMagic(uint32_t magic);
};

#endif
#ifndef GET_CONTEXT
static displayControl_client_context_t::CONTEXT_ACCESSOR_TYPE *getCurrentContext = NULL;
void displayControl_client_context_t::setContextAccessor(CONTEXT_ACCESSOR_TYPE *f) { getCurrentContext = f; }
#define GET_CONTEXT displayControl_client_context_t * ctx = getCurrentContext()
#endif

int32_t FBPost(uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t bpp)
{
    GET_CONTEXT;
    return ctx->FBPost(ctx, name, width, height, stride, bpp);
}

void postLayer(const char* name, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t sourceCropLeft, int32_t sourceCropTop, int32_t sourceCropRight, int32_t sourceCropBottom, int32_t displayFrameLeft, int32_t displayFrameTop, int32_t displayFrameRight, int32_t displayFrameBottom)
{
    GET_CONTEXT;
    ctx->postLayer(ctx, name, bo_name, width, height, stride, bpp, sourceCropLeft, sourceCropTop, sourceCropRight, sourceCropBottom, displayFrameLeft, displayFrameTop, displayFrameRight, displayFrameBottom);
}

int32_t postAllLayersDone()
{
    GET_CONTEXT;
    return ctx->postAllLayersDone(ctx);
}

uint32_t getDisplayWidth()
{
    GET_CONTEXT;
    return ctx->getDisplayWidth(ctx);
}

uint32_t getDisplayHeight()
{
    GET_CONTEXT;
    return ctx->getDisplayHeight(ctx);
}

uint32_t getDisplayFPS()
{
    GET_CONTEXT;
    return ctx->getDisplayFPS(ctx);
}

uint32_t getDisplayXDpi()
{
    GET_CONTEXT;
    return ctx->getDisplayXDpi(ctx);
}

uint32_t getDisplayYDpi()
{
    GET_CONTEXT;
    return ctx->getDisplayYDpi(ctx);
}

void postVirtualDisplay(const char* name, uint32_t id, uint32_t bo_name, int32_t width, int32_t height, int32_t stride, int32_t bpp, int32_t orientation)
{
    GET_CONTEXT;
    ctx->postVirtualDisplay(ctx, name, id, bo_name, width, height, stride, bpp, orientation);
}

int32_t postAllVirtualDisplaysDone()
{
    GET_CONTEXT;
    return ctx->postAllVirtualDisplaysDone(ctx);
}

int32_t postBoForScreenRecord(uint32_t at_name, uint32_t name, int32_t width, int32_t height, int32_t stride, int32_t ver)
{
    GET_CONTEXT;
    return ctx->postBoForScreenRecord(ctx, at_name, name, width, height, stride, ver);
}

void postCaptureScreenColorBuffer(uint32_t name)
{
    GET_CONTEXT;
    ctx->postCaptureScreenColorBuffer(ctx, name);
}

int32_t authenticateMagic(uint32_t magic)
{
    GET_CONTEXT;
    return ctx->authenticateMagic(ctx, magic);
}

